h3#plugins plugins
  :markdown
    Roots ships with a few core compilers that are optimized for a speedy and efficient workflow. But of course everyone has their own preferred tools, and if there are languages you would rather work in, you can build them in to roots through the plugin interface.

    Plugins need only be one file, and are frequently less than 10 lines of javascript (many of the core compilers are, actually). To create a plugin, just drop a new file, javascript or coffeescript, into `/plugins`. The module need only export two methods, `settings` and `compile`. To get you started, you can run `roots plugin generate` to have roots generate a basic plugin template.

    Here are a few examples of how plugins can look. Note that plugins are executed inside roots' environment, so if you want to require any external files, you need to use `module.require()` instead of just `require()` in order to have roots look for files starting in the plugins directory.

    - [jade compiler](https://github.com/jenius/roots/blob/master/lib/adapters/jade.js)
    - [stylus compiler](https://github.com/jenius/roots/blob/master/lib/adapters/styl.js)
    - [coffeescript compiler](https://github.com/jenius/roots/blob/master/lib/adapters/coffee.js)

    ##### File Object

    You will notice that the plugin's compile method is passed two params, the first one being a `file` object which holds a large amount of information about the file being compiled, and the second is a callback. Below is documentation for the properties of the `file` object.

    **`file.path`**    
    Returns the absolute path of the current file

    **`file.contents`**    
    Returns a string with the contents of the current file

    **`file.extension`**    
    Returns the extension of the current file

    **`file.target_extension`**    
    Returns the extension that the file will compile into

    **`file.export_path`**    
    Returns the absolute path where file will be written after compile

    **`file.layout_path`**    
    _If the file's target extension is html_, Returns the absolute path of the layout file it will be compiled into.

    **`file.layout_contents`**    
    _If the file's target extension is html_, Returns the contents of the layout file it will be compiled into.

    **`file.locals(extra_object)`**    
    Returns all the local functions to be rendered with a view template. If you pass it an object, it will include it in the locals. You will want to add yield when compiling the layout, like in the ejs compiler example above.

    ##### Notes

    If you console.log out a dynamic file, you may find more properties that are set as part of dynamic file parsing, but don't worry about these. Messing with the dynamic content properties inside a compiler is a terrible idea - **all a compiler should do is transform the file contents**.

    Note that if you are writing a plugin that parses html, **it must return a function** if you want to it have access to the locals. If it returns a string, locals will not be available. Every other file format should return a string.

    If you want to dig into the file class a bit more, feel free to [check out the source](https://github.com/jenius/roots/blob/master/lib/utils/file_helper.js), but be warned that this particular file is wildly complicated.

    The following commands are also available to make working with plugins easier.

    - `roots plugin generate` generates a plugin template for you in the `/plugins` folder.
    - `roots plugin install github-username/repo` installs a plugin to `/plugins` from github.
